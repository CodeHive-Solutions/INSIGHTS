# Generated by Django 4.2.5 on 2023-11-09 08:58

from django.db import migrations, models
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Goals',
            fields=[
                ('cedula', models.BigIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('job_title', models.CharField(max_length=100)),
                ('campaign', models.CharField(max_length=100)),
                ('coordinator', models.CharField(max_length=100)),
                ('criteria', models.CharField(max_length=100)),
                ('quantity', models.CharField(max_length=20)),
                ('result', models.CharField(blank=True, max_length=10)),
                ('quality', models.CharField(blank=True, max_length=10)),
                ('evaluation', models.CharField(blank=True, max_length=10)),
                ('clean_desk', models.CharField(blank=True, max_length=10)),
                ('total', models.CharField(blank=True, max_length=10)),
                ('table_goal', models.CharField(max_length=50, null=True)),
                ('goal_date', models.CharField(max_length=20)),
                ('execution_date', models.CharField(max_length=20)),
                ('observation', models.CharField(max_length=350, null=True)),
                ('accepted', models.BooleanField(null=True)),
                ('accepted_at', models.DateTimeField(null=True)),
                ('accepted_execution', models.BooleanField(null=True)),
                ('accepted_execution_at', models.DateTimeField(null=True)),
                ('status', models.BooleanField(default=None, null=True)),
                ('last_update', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalGoals',
            fields=[
                ('cedula', models.BigIntegerField(db_index=True)),
                ('name', models.CharField(max_length=100)),
                ('job_title', models.CharField(max_length=100)),
                ('campaign', models.CharField(max_length=100)),
                ('coordinator', models.CharField(max_length=100)),
                ('criteria', models.CharField(max_length=100)),
                ('quantity', models.CharField(max_length=20)),
                ('result', models.CharField(blank=True, max_length=10)),
                ('quality', models.CharField(blank=True, max_length=10)),
                ('evaluation', models.CharField(blank=True, max_length=10)),
                ('clean_desk', models.CharField(blank=True, max_length=10)),
                ('total', models.CharField(blank=True, max_length=10)),
                ('table_goal', models.CharField(max_length=50, null=True)),
                ('goal_date', models.CharField(max_length=20)),
                ('execution_date', models.CharField(max_length=20)),
                ('observation', models.CharField(max_length=350, null=True)),
                ('accepted', models.BooleanField(null=True)),
                ('accepted_at', models.DateTimeField(null=True)),
                ('accepted_execution', models.BooleanField(null=True)),
                ('accepted_execution_at', models.DateTimeField(null=True)),
                ('status', models.BooleanField(default=None, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical goals',
                'verbose_name_plural': 'historical goalss',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTableInfo',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('fringe', models.CharField(max_length=100)),
                ('diary_goal', models.IntegerField()),
                ('days', models.CharField(max_length=350)),
                ('month_goal', models.IntegerField()),
                ('hours', models.IntegerField()),
                ('collection_account', models.IntegerField()),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical table info',
                'verbose_name_plural': 'historical table infos',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='TableInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('fringe', models.CharField(max_length=100)),
                ('diary_goal', models.IntegerField()),
                ('days', models.CharField(max_length=350)),
                ('month_goal', models.IntegerField()),
                ('hours', models.IntegerField()),
                ('collection_account', models.IntegerField()),
            ],
        ),
    ]
